---
#------------------------------------------------------------------------------
# Playbook to CREATE AWS demo environment. 
#------------------------------------------------------------------------------

- name: PROVISION VPC SUBNETS & F5 INSTANCES
  hosts: localhost
  connection: local
  gather_facts: no

  environment:
    AWS_ACCESS_KEY_ID: "{{ ec2_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ ec2_secret_key }}"
    AWS_REGION: "{{ aws_region }}"

    

#------------------------------------------------------------------------------
# Load Variables from files 
#------------------------------------------------------------------------------
  
  # You need to create a file named aws_creds.yaml (update path below) with the 
  # following variables:
  #
  #  ec2_access_key: "--your-key-here--"
  #  ec2_secret_key: "--your-secret-here--"
  #
  vars_files:
    - ../../creds/aws_creds.yaml
    - ../../creds/big_creds.yaml
    - ./vars-5.yaml

#------------------------------------------------------------------------------
# End variables
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Start tasks
#------------------------------------------------------------------------------

  tasks:

  - name: CREATE VPC
    ec2_vpc_net:
      name: "{{ vpc_name }}"
      cidr_block: "{{ vpc_cidr }}"
      region: "{{ aws_region }}"
      state: present
      tags:
        automated: "{{ automation_tool }}"
        stack: "{{ stack_name }}"
        UK-SE: "{{ uk_se_name }}"
    register: create_vpc


  - name: "SET FACT: VPC ID"
    set_fact:
      vpc_id: "{{ create_vpc.vpc.id }}"
  

  - name: CREATE VPC SUBNETS
    ec2_vpc_subnet:
      vpc_id: "{{ vpc_id }}"
      cidr: "{{ item.cidr }}"
      az: "{{ item.az }}"
      tags:
        name: "{{ item.name }}"
        automated: "{{ automation_tool }}"
        stack: "{{ stack_name }}"
        UK-SE: "{{ uk_se_name }}"
      state: present
    with_items: "{{ vpc_subnets }}"
    register: create_vpc_subnets


  - name: "COLLECT SUBNET FACTS"
    ec2_vpc_subnet_facts:
      filters:
        vpc-id: "{{ vpc_id }}"
    register: vpc_subnet_facts


  - name: "SET FACT: VPC SUBNET IDS"
    set_fact:
      vpc_subnet_ids: "{{ vpc_subnet_ids | default({}) | combine({ (item.tags.name | default('default')): item.id }) }}"
    loop: "{{ vpc_subnet_facts.subnets }}"


  - name: CREATE INTERNET GATEWAY
    ec2_vpc_igw:
      vpc_id: "{{ vpc_id }}"
      state: present
      tags:
        automated: "{{ automation_tool }}"
        stack: "{{ stack_name }}"
        UK-SE: "{{ uk_se_name }}"
    register: create_gateway


  - name: "SET FACT: GATEWAY ID"
    set_fact:
      vpc_gateway_id: "{{ create_gateway.gateway_id }}"
 

  # public route table that routes through the internet gateway -- attach it to our three public subnets
  - name: CREATE ROUTE TABLE FOR PUBLIC SUBNETS
    ec2_vpc_route_table:
      vpc_id: "{{ vpc_id }}"
      state: present
      tags:
        automated: "{{ automation_tool }}"
        stack: "{{ stack_name }}"
        UK-SE: "{{ uk_se_name }}"
      subnets:
        - "{{ vpc_subnet_ids.mgmt_a }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ vpc_gateway_id }}"


  - name: CREATE ANSIBLE CFT DEPLOYMENT
    cloudformation:
      stack_name: "{{ stack_name }}"
      state: present
      region: "{{ aws_region }}"
      disable_rollback: true
      template_url: "https://s3.amazonaws.com/f5-cft/f5-existing-stack-payg-2nic-bigip.template"
      template_parameters:
        group:  "f5group"
        declarationUrl:  "none"
        Vpc: "{{ vpc_id }}"
        managementSubnetAz1:  "{{ vpc_subnet_ids.mgmt_a }}"
        subnet1Az1:  "{{ vpc_subnet_ids.traffic_a }}"
        restrictedSrcAddress: "0.0.0.0/0"
        restrictedSrcAddressApp: "0.0.0.0/0"
        sshKey:  "{{ sshKey }}"
        environment:  "Demo"
        application:  "f5app"
        customImageId:  "OPTIONAL"
        imageName:  "Best25Mbps"
        ntpServer:  "0.pool.ntp.org"
        costcenter:  "SALES EMEA-UK 4261"
        owner:  "{{ uk_se_name }}"
        timezone:  "UTC"
        instanceType:  "m5.xlarge"
        allowUsageAnalytics:  "Yes"
      tags:
        automated: "{{ automation_tool }}"
        stack: "{{ stack_name }}"
        UK-SE: "{{ uk_se_name }}"
    register: result 


  - name: GATHER FACTS FROM CFT OUTPUT - NEED BIG-IP PUBLIC IPS 
    cloudformation_facts:
      stack_name: "{{ stack_name }}"
    register: my_stack


  - name: SSH TO BIG-IPS AND ENABLE PASSWORD AUTH
    bigip_command:
      commands:
        - modify auth user "{{ bigip_user }}" password "{{ bigip_pass }}" 
        - save sys config
      wait_for:
        - result[1] contains done
      provider:
        server: "{{ item }}"
        user: "{{ bigip_user }}"
        password: "{{ bigip_pass }}"
        transport: cli
        ssh_keyfile: "{{ ssh_key_file }}"
        validate_certs: no
    register: ssh_output
    delegate_to: localhost
    loop:
      - "{{ my_stack.ansible_facts.cloudformation[stack_name].stack_outputs.Bigip1ManagementEipAddress }}"
      

  - name: DEBUG ALL VARS
    debug:
      msg: "You should now be able to login to the BIG-IP on https://{{ item }}"
    loop:
      - "{{ my_stack.ansible_facts.cloudformation[stack_name].stack_outputs.Bigip1ManagementEipAddress }}"
      

#  - name: DEBUG ALL VARS
#    debug:
#      msg: "{{ vars }}"

#------------------------------------------------------------------------------
# End tasks
#------------------------------------------------------------------------------
...